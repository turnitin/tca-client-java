/*
 * Turnitin Core API
 * Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 
 *
 * The version of the OpenAPI document: 1.0.258
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import java.io.File;
import org.openapitools.client.model.GenerateSimilarityPDF;
import org.openapitools.client.model.PdfStatusResponse;
import org.openapitools.client.model.RateLimitError;
import org.openapitools.client.model.RequestPdfResponse;
import org.openapitools.client.model.SimilarityMetadata;
import org.openapitools.client.model.SimilarityPutRequest;
import org.openapitools.client.model.SimilarityViewerUrlResponse;
import org.openapitools.client.model.SimilarityViewerUrlSettings;
import org.openapitools.client.model.SuccessMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SimilarityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SimilarityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SimilarityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadSimilarityReportPdf
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StreamingResponseBody, Pdf binary </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSimilarityReportPdfCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/{id}/similarity/pdf/{pdf_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "pdf_id" + "}", localVarApiClient.escapeString(pdfId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/pdf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadSimilarityReportPdfValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling downloadSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling downloadSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'pdfId' is set
        if (pdfId == null) {
            throw new ApiException("Missing the required parameter 'pdfId' when calling downloadSimilarityReportPdf(Async)");
        }

        return downloadSimilarityReportPdfCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, _callback);

    }

    /**
     * GET download pdf
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StreamingResponseBody, Pdf binary </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public File downloadSimilarityReportPdf(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId) throws ApiException {
        ApiResponse<File> localVarResp = downloadSimilarityReportPdfWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId);
        return localVarResp.getData();
    }

    /**
     * GET download pdf
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StreamingResponseBody, Pdf binary </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> downloadSimilarityReportPdfWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId) throws ApiException {
        okhttp3.Call localVarCall = downloadSimilarityReportPdfValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET download pdf (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> StreamingResponseBody, Pdf binary </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSimilarityReportPdfAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadSimilarityReportPdfValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarityReportPdfStatus
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportPdfStatusCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/{id}/similarity/pdf/{pdf_id}/status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "pdf_id" + "}", localVarApiClient.escapeString(pdfId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarityReportPdfStatusValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getSimilarityReportPdfStatus(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getSimilarityReportPdfStatus(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarityReportPdfStatus(Async)");
        }

        // verify the required parameter 'pdfId' is set
        if (pdfId == null) {
            throw new ApiException("Missing the required parameter 'pdfId' when calling getSimilarityReportPdfStatus(Async)");
        }

        return getSimilarityReportPdfStatusCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, _callback);

    }

    /**
     * GET pdf download status
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @return PdfStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public PdfStatusResponse getSimilarityReportPdfStatus(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId) throws ApiException {
        ApiResponse<PdfStatusResponse> localVarResp = getSimilarityReportPdfStatusWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId);
        return localVarResp.getData();
    }

    /**
     * GET pdf download status
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @return ApiResponse&lt;PdfStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PdfStatusResponse> getSimilarityReportPdfStatusWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId) throws ApiException {
        okhttp3.Call localVarCall = getSimilarityReportPdfStatusValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, null);
        Type localVarReturnType = new TypeToken<PdfStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GET pdf download status (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param pdfId The Pdf ID (returned upon a successful POST to /submissions/{submission_id}/similarity/pdf)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Status message indicating processing status for requested PDF  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} or Pdf not found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission or Failed to generate PDF </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportPdfStatusAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, String pdfId, final ApiCallback<PdfStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarityReportPdfStatusValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, pdfId, _callback);
        Type localVarReturnType = new TypeToken<PdfStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarityReportResults
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Similarity info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportResultsCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/submissions/{id}/similarity"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarityReportResultsValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getSimilarityReportResults(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getSimilarityReportResults(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarityReportResults(Async)");
        }

        return getSimilarityReportResultsCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, _callback);

    }

    /**
     * Get Similarity Report Results
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @return SimilarityMetadata
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Similarity info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public SimilarityMetadata getSimilarityReportResults(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id) throws ApiException {
        ApiResponse<SimilarityMetadata> localVarResp = getSimilarityReportResultsWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id);
        return localVarResp.getData();
    }

    /**
     * Get Similarity Report Results
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @return ApiResponse&lt;SimilarityMetadata&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Similarity info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimilarityMetadata> getSimilarityReportResultsWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id) throws ApiException {
        okhttp3.Call localVarCall = getSimilarityReportResultsValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, null);
        Type localVarReturnType = new TypeToken<SimilarityMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Similarity Report Results (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Similarity info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportResultsAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, final ApiCallback<SimilarityMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarityReportResultsValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, _callback);
        Type localVarReturnType = new TypeToken<SimilarityMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarityReportUrl
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating URL for launching similarity report  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportUrlCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityViewerUrlSettings data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/submissions/{id}/viewer-url"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarityReportUrlValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityViewerUrlSettings data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getSimilarityReportUrl(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getSimilarityReportUrl(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSimilarityReportUrl(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling getSimilarityReportUrl(Async)");
        }

        return getSimilarityReportUrlCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, _callback);

    }

    /**
     * Returns a URL to access Cloud Viewer
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @return SimilarityViewerUrlResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating URL for launching similarity report  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public SimilarityViewerUrlResponse getSimilarityReportUrl(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityViewerUrlSettings data) throws ApiException {
        ApiResponse<SimilarityViewerUrlResponse> localVarResp = getSimilarityReportUrlWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data);
        return localVarResp.getData();
    }

    /**
     * Returns a URL to access Cloud Viewer
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SimilarityViewerUrlResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating URL for launching similarity report  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimilarityViewerUrlResponse> getSimilarityReportUrlWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityViewerUrlSettings data) throws ApiException {
        okhttp3.Call localVarCall = getSimilarityReportUrlValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, null);
        Type localVarReturnType = new TypeToken<SimilarityViewerUrlResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a URL to access Cloud Viewer (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating URL for launching similarity report  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarityReportUrlAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityViewerUrlSettings data, final ApiCallback<SimilarityViewerUrlResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarityReportUrlValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, _callback);
        Type localVarReturnType = new TypeToken<SimilarityViewerUrlResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSimilarityReport
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful scheduling of Similarity Report generation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSimilarityReportCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityPutRequest data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/submissions/{id}/similarity"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSimilarityReportValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityPutRequest data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling requestSimilarityReport(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling requestSimilarityReport(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestSimilarityReport(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling requestSimilarityReport(Async)");
        }

        return requestSimilarityReportCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, _callback);

    }

    /**
     * Request Similarity Report generation
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @return SuccessMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful scheduling of Similarity Report generation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public SuccessMessage requestSimilarityReport(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityPutRequest data) throws ApiException {
        ApiResponse<SuccessMessage> localVarResp = requestSimilarityReportWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data);
        return localVarResp.getData();
    }

    /**
     * Request Similarity Report generation
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @return ApiResponse&lt;SuccessMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful scheduling of Similarity Report generation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessMessage> requestSimilarityReportWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityPutRequest data) throws ApiException {
        okhttp3.Call localVarCall = requestSimilarityReportValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, null);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Similarity Report generation (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful scheduling of Similarity Report generation  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSimilarityReportAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, SimilarityPutRequest data, final ApiCallback<SuccessMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSimilarityReportValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, data, _callback);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSimilarityReportPdf
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param generateSimilarityPDF  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating ID for the PDF generation request  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSimilarityReportPdfCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, GenerateSimilarityPDF generateSimilarityPDF, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateSimilarityPDF;

        // create path and map variables
        String localVarPath = "/submissions/{id}/similarity/pdf"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSimilarityReportPdfValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, GenerateSimilarityPDF generateSimilarityPDF, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling requestSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling requestSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestSimilarityReportPdf(Async)");
        }

        // verify the required parameter 'generateSimilarityPDF' is set
        if (generateSimilarityPDF == null) {
            throw new ApiException("Missing the required parameter 'generateSimilarityPDF' when calling requestSimilarityReportPdf(Async)");
        }

        return requestSimilarityReportPdfCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, generateSimilarityPDF, _callback);

    }

    /**
     * Request Pdf download and returns the Pdf Id
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param generateSimilarityPDF  (required)
     * @return RequestPdfResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating ID for the PDF generation request  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public RequestPdfResponse requestSimilarityReportPdf(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, GenerateSimilarityPDF generateSimilarityPDF) throws ApiException {
        ApiResponse<RequestPdfResponse> localVarResp = requestSimilarityReportPdfWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, generateSimilarityPDF);
        return localVarResp.getData();
    }

    /**
     * Request Pdf download and returns the Pdf Id
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param generateSimilarityPDF  (required)
     * @return ApiResponse&lt;RequestPdfResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating ID for the PDF generation request  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestPdfResponse> requestSimilarityReportPdfWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, GenerateSimilarityPDF generateSimilarityPDF) throws ApiException {
        okhttp3.Call localVarCall = requestSimilarityReportPdfValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, generateSimilarityPDF, null);
        Type localVarReturnType = new TypeToken<RequestPdfResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request Pdf download and returns the Pdf Id (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param id The Submission ID (returned upon a successful POST to /submissions)  (required)
     * @param generateSimilarityPDF  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success message indicating ID for the PDF generation request  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Submission not found for {id} </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A Similarity Report is already generating for this submission </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSimilarityReportPdfAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String id, GenerateSimilarityPDF generateSimilarityPDF, final ApiCallback<RequestPdfResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSimilarityReportPdfValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, id, generateSimilarityPDF, _callback);
        Type localVarReturnType = new TypeToken<RequestPdfResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
