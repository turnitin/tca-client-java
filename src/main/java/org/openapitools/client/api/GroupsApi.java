/*
 * Turnitin Core API
 * Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 
 *
 * The version of the OpenAPI document: 1.0.249
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddGroupAttachmentRequest;
import org.openapitools.client.model.AddGroupAttachmentResponse;
import org.openapitools.client.model.AggregateGroup;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.GetGroupAttachments200Response;
import org.openapitools.client.model.GroupAttachmentResponse;
import org.openapitools.client.model.RateLimitError;
import org.openapitools.client.model.SubmissionSizeError;
import org.openapitools.client.model.SuccessMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addGroupAttachment
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully add attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupAttachmentCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AddGroupAttachmentRequest data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addGroupAttachmentValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AddGroupAttachmentRequest data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling addGroupAttachment(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling addGroupAttachment(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling addGroupAttachment(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling addGroupAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = addGroupAttachmentCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, _callback);
        return localVarCall;

    }

    /**
     * Add attachment to a group. will create a group if it does not exist.
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @return AddGroupAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully add attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public AddGroupAttachmentResponse addGroupAttachment(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AddGroupAttachmentRequest data) throws ApiException {
        ApiResponse<AddGroupAttachmentResponse> localVarResp = addGroupAttachmentWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data);
        return localVarResp.getData();
    }

    /**
     * Add attachment to a group. will create a group if it does not exist.
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @return ApiResponse&lt;AddGroupAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully add attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AddGroupAttachmentResponse> addGroupAttachmentWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AddGroupAttachmentRequest data) throws ApiException {
        okhttp3.Call localVarCall = addGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, null);
        Type localVarReturnType = new TypeToken<AddGroupAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add attachment to a group. will create a group if it does not exist. (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully add attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addGroupAttachmentAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AddGroupAttachmentRequest data, final ApiCallback<AddGroupAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<AddGroupAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGroupAttachment
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Attachment successfully deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAttachmentCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments/{attach_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "attach_id" + "\\}", localVarApiClient.escapeString(attachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupAttachmentValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling deleteGroupAttachment(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling deleteGroupAttachment(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling deleteGroupAttachment(Async)");
        }
        
        // verify the required parameter 'attachId' is set
        if (attachId == null) {
            throw new ApiException("Missing the required parameter 'attachId' when calling deleteGroupAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = deleteGroupAttachmentCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, _callback);
        return localVarCall;

    }

    /**
     * Hard delete group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Attachment successfully deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGroupAttachment(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId) throws ApiException {
        deleteGroupAttachmentWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId);
    }

    /**
     * Hard delete group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Attachment successfully deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGroupAttachmentWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Hard delete group attachment (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Attachment successfully deleted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGroupAttachmentAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroup
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get AggregateGroup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroup(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroup(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroup(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, _callback);
        return localVarCall;

    }

    /**
     * Get group, group context and group context owners info
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @return AggregateGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get AggregateGroup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public AggregateGroup getGroup(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId) throws ApiException {
        ApiResponse<AggregateGroup> localVarResp = getGroupWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId);
        return localVarResp.getData();
    }

    /**
     * Get group, group context and group context owners info
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @return ApiResponse&lt;AggregateGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get AggregateGroup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AggregateGroup> getGroupWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, null);
        Type localVarReturnType = new TypeToken<AggregateGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group, group context and group context owners info (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get AggregateGroup </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback<AggregateGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, _callback);
        Type localVarReturnType = new TypeToken<AggregateGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupAttachment
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAttachmentCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments/{attach_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "attach_id" + "\\}", localVarApiClient.escapeString(attachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupAttachmentValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroupAttachment(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroupAttachment(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupAttachment(Async)");
        }
        
        // verify the required parameter 'attachId' is set
        if (attachId == null) {
            throw new ApiException("Missing the required parameter 'attachId' when calling getGroupAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupAttachmentCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, _callback);
        return localVarCall;

    }

    /**
     * Get group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @return GroupAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public GroupAttachmentResponse getGroupAttachment(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId) throws ApiException {
        ApiResponse<GroupAttachmentResponse> localVarResp = getGroupAttachmentWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId);
        return localVarResp.getData();
    }

    /**
     * Get group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @return ApiResponse&lt;GroupAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupAttachmentResponse> getGroupAttachmentWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId) throws ApiException {
        okhttp3.Call localVarCall = getGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, null);
        Type localVarReturnType = new TypeToken<GroupAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group attachment (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAttachmentAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, final ApiCallback<GroupAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, _callback);
        Type localVarReturnType = new TypeToken<GroupAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupAttachments
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachments </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAttachmentsCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupAttachmentsValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling getGroupAttachments(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling getGroupAttachments(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupAttachments(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupAttachmentsCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, _callback);
        return localVarCall;

    }

    /**
     * Get all attachments
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @return GetGroupAttachments200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachments </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupAttachments200Response getGroupAttachments(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId) throws ApiException {
        ApiResponse<GetGroupAttachments200Response> localVarResp = getGroupAttachmentsWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId);
        return localVarResp.getData();
    }

    /**
     * Get all attachments
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @return ApiResponse&lt;GetGroupAttachments200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachments </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupAttachments200Response> getGroupAttachmentsWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupAttachmentsValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, null);
        Type localVarReturnType = new TypeToken<GetGroupAttachments200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all attachments (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachments </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupAttachmentsAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, final ApiCallback<GetGroupAttachments200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupAttachmentsValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, _callback);
        Type localVarReturnType = new TypeToken<GetGroupAttachments200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupsGroupIdPut
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upssert group, group context and group context owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupIdPutCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AggregateGroup data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupsGroupIdPutValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AggregateGroup data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling groupsGroupIdPut(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling groupsGroupIdPut(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupsGroupIdPut(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling groupsGroupIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = groupsGroupIdPutCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, _callback);
        return localVarCall;

    }

    /**
     * upsert group, group context and group context owners info
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @return AggregateGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upssert group, group context and group context owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public AggregateGroup groupsGroupIdPut(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AggregateGroup data) throws ApiException {
        ApiResponse<AggregateGroup> localVarResp = groupsGroupIdPutWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data);
        return localVarResp.getData();
    }

    /**
     * upsert group, group context and group context owners info
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @return ApiResponse&lt;AggregateGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upssert group, group context and group context owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AggregateGroup> groupsGroupIdPutWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AggregateGroup data) throws ApiException {
        okhttp3.Call localVarCall = groupsGroupIdPutValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, null);
        Type localVarReturnType = new TypeToken<AggregateGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * upsert group, group context and group context owners info (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully upssert group, group context and group context owners </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupsGroupIdPutAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, AggregateGroup data, final ApiCallback<AggregateGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupsGroupIdPutValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, data, _callback);
        Type localVarReturnType = new TypeToken<AggregateGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGroupAttachment
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAttachmentCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, AddGroupAttachmentRequest data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments/{attach_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "attach_id" + "\\}", localVarApiClient.escapeString(attachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGroupAttachmentValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, AddGroupAttachmentRequest data, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling updateGroupAttachment(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling updateGroupAttachment(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling updateGroupAttachment(Async)");
        }
        
        // verify the required parameter 'attachId' is set
        if (attachId == null) {
            throw new ApiException("Missing the required parameter 'attachId' when calling updateGroupAttachment(Async)");
        }
        
        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling updateGroupAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = updateGroupAttachmentCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, data, _callback);
        return localVarCall;

    }

    /**
     * Patch a group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param data  (required)
     * @return GroupAttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public GroupAttachmentResponse updateGroupAttachment(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, AddGroupAttachmentRequest data) throws ApiException {
        ApiResponse<GroupAttachmentResponse> localVarResp = updateGroupAttachmentWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, data);
        return localVarResp.getData();
    }

    /**
     * Patch a group attachment
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param data  (required)
     * @return ApiResponse&lt;GroupAttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupAttachmentResponse> updateGroupAttachmentWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, AddGroupAttachmentRequest data) throws ApiException {
        okhttp3.Call localVarCall = updateGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, data, null);
        Type localVarReturnType = new TypeToken<GroupAttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch a group attachment (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId group_id (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully get attachment </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGroupAttachmentAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, AddGroupAttachmentRequest data, final ApiCallback<GroupAttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, data, _callback);
        Type localVarReturnType = new TypeToken<GroupAttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadGroupAttachment
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId The Group ID (required to already exist)  (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param contentDisposition *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60;  (required)
     * @param _file the attachment file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful PUT request for a submission upload  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission file size, Submission file must be &gt; than 0 MB and &lt;&#x3D; to 100 MB </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadGroupAttachmentCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, String contentDisposition, Object _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = _file;

        // create path and map variables
        String localVarPath = "/groups/{group_id}/attachments/{attach_id}/original"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()))
            .replaceAll("\\{" + "attach_id" + "\\}", localVarApiClient.escapeString(attachId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        if (contentDisposition != null) {
            localVarHeaderParams.put("Content-Disposition", localVarApiClient.parameterToString(contentDisposition));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "binary/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadGroupAttachmentValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, String contentDisposition, Object _file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling uploadGroupAttachment(Async)");
        }
        
        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling uploadGroupAttachment(Async)");
        }
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling uploadGroupAttachment(Async)");
        }
        
        // verify the required parameter 'attachId' is set
        if (attachId == null) {
            throw new ApiException("Missing the required parameter 'attachId' when calling uploadGroupAttachment(Async)");
        }
        
        // verify the required parameter 'contentDisposition' is set
        if (contentDisposition == null) {
            throw new ApiException("Missing the required parameter 'contentDisposition' when calling uploadGroupAttachment(Async)");
        }
        
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadGroupAttachment(Async)");
        }
        

        okhttp3.Call localVarCall = uploadGroupAttachmentCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, contentDisposition, _file, _callback);
        return localVarCall;

    }

    /**
     * Upload Submitted File
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId The Group ID (required to already exist)  (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param contentDisposition *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60;  (required)
     * @param _file the attachment file (required)
     * @return SuccessMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful PUT request for a submission upload  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission file size, Submission file must be &gt; than 0 MB and &lt;&#x3D; to 100 MB </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public SuccessMessage uploadGroupAttachment(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, String contentDisposition, Object _file) throws ApiException {
        ApiResponse<SuccessMessage> localVarResp = uploadGroupAttachmentWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, contentDisposition, _file);
        return localVarResp.getData();
    }

    /**
     * Upload Submitted File
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId The Group ID (required to already exist)  (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param contentDisposition *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60;  (required)
     * @param _file the attachment file (required)
     * @return ApiResponse&lt;SuccessMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful PUT request for a submission upload  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission file size, Submission file must be &gt; than 0 MB and &lt;&#x3D; to 100 MB </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SuccessMessage> uploadGroupAttachmentWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, String contentDisposition, Object _file) throws ApiException {
        okhttp3.Call localVarCall = uploadGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, contentDisposition, _file, null);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Submitted File (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param groupId The Group ID (required to already exist)  (required)
     * @param attachId The attachment ID (returned from a successful group attachment request)  (required)
     * @param contentDisposition *must include the \&quot;filename\&quot; parameter, e.g. &#x60;inline; filename&#x3D;\&quot;MyFile.docx\&quot;&#x60;  (required)
     * @param _file the attachment file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success message indicating successful PUT request for a submission upload  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid submission file size, Submission file must be &gt; than 0 MB and &lt;&#x3D; to 100 MB </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadGroupAttachmentAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String groupId, String attachId, String contentDisposition, Object _file, final ApiCallback<SuccessMessage> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadGroupAttachmentValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, groupId, attachId, contentDisposition, _file, _callback);
        Type localVarReturnType = new TypeToken<SuccessMessage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
