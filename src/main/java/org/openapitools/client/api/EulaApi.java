/*
 * Turnitin Core API
 * Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 
 *
 * The version of the OpenAPI document: 1.0.258
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.EulaAcceptListItem;
import org.openapitools.client.model.EulaAcceptRequest;
import org.openapitools.client.model.EulaVersion;
import org.openapitools.client.model.RateLimitError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EulaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EulaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EulaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eulaVersionIdAcceptPost
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param data  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A EULA acceptence response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdAcceptPostCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, EulaAcceptRequest data, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = data;

        // create path and map variables
        String localVarPath = "/eula/{version_id}/accept"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eulaVersionIdAcceptPostValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, EulaAcceptRequest data, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling eulaVersionIdAcceptPost(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling eulaVersionIdAcceptPost(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling eulaVersionIdAcceptPost(Async)");
        }

        // verify the required parameter 'data' is set
        if (data == null) {
            throw new ApiException("Missing the required parameter 'data' when calling eulaVersionIdAcceptPost(Async)");
        }

        return eulaVersionIdAcceptPostCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, data, _callback);

    }

    /**
     * Accepts a particular EULA version on behalf of an external user
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param data  (required)
     * @return EulaAcceptListItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A EULA acceptence response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public EulaAcceptListItem eulaVersionIdAcceptPost(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, EulaAcceptRequest data) throws ApiException {
        ApiResponse<EulaAcceptListItem> localVarResp = eulaVersionIdAcceptPostWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, data);
        return localVarResp.getData();
    }

    /**
     * Accepts a particular EULA version on behalf of an external user
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param data  (required)
     * @return ApiResponse&lt;EulaAcceptListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A EULA acceptence response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EulaAcceptListItem> eulaVersionIdAcceptPostWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, EulaAcceptRequest data) throws ApiException {
        okhttp3.Call localVarCall = eulaVersionIdAcceptPostValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, data, null);
        Type localVarReturnType = new TypeToken<EulaAcceptListItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accepts a particular EULA version on behalf of an external user (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param data  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A EULA acceptence response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdAcceptPostAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, EulaAcceptRequest data, final ApiCallback<EulaAcceptListItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = eulaVersionIdAcceptPostValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, data, _callback);
        Type localVarReturnType = new TypeToken<EulaAcceptListItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eulaVersionIdAcceptUserIdGet
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param userId The user associated with the EULA status  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of EULA acceptence responses for the specified version (one per language) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdAcceptUserIdGetCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eula/{version_id}/accept/{user_id}"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eulaVersionIdAcceptUserIdGetValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling eulaVersionIdAcceptUserIdGet(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling eulaVersionIdAcceptUserIdGet(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling eulaVersionIdAcceptUserIdGet(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling eulaVersionIdAcceptUserIdGet(Async)");
        }

        return eulaVersionIdAcceptUserIdGetCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, userId, _callback);

    }

    /**
     * Queries the acceptences of a particular EULA version on behalf of an external user
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param userId The user associated with the EULA status  (required)
     * @return List&lt;EulaAcceptListItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of EULA acceptence responses for the specified version (one per language) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public List<EulaAcceptListItem> eulaVersionIdAcceptUserIdGet(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String userId) throws ApiException {
        ApiResponse<List<EulaAcceptListItem>> localVarResp = eulaVersionIdAcceptUserIdGetWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, userId);
        return localVarResp.getData();
    }

    /**
     * Queries the acceptences of a particular EULA version on behalf of an external user
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param userId The user associated with the EULA status  (required)
     * @return ApiResponse&lt;List&lt;EulaAcceptListItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of EULA acceptence responses for the specified version (one per language) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<EulaAcceptListItem>> eulaVersionIdAcceptUserIdGetWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String userId) throws ApiException {
        okhttp3.Call localVarCall = eulaVersionIdAcceptUserIdGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, userId, null);
        Type localVarReturnType = new TypeToken<List<EulaAcceptListItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Queries the acceptences of a particular EULA version on behalf of an external user (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param userId The user associated with the EULA status  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of EULA acceptence responses for the specified version (one per language) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdAcceptUserIdGetAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String userId, final ApiCallback<List<EulaAcceptListItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eulaVersionIdAcceptUserIdGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, userId, _callback);
        Type localVarReturnType = new TypeToken<List<EulaAcceptListItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eulaVersionIdGet
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version data. A null value for valid_until indicates no expiration of the EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdGetCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eula/{version_id}"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eulaVersionIdGetValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling eulaVersionIdGet(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling eulaVersionIdGet(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling eulaVersionIdGet(Async)");
        }

        return eulaVersionIdGetCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, _callback);

    }

    /**
     * Gets information about a particular EULA version
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @return EulaVersion
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version data. A null value for valid_until indicates no expiration of the EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public EulaVersion eulaVersionIdGet(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang) throws ApiException {
        ApiResponse<EulaVersion> localVarResp = eulaVersionIdGetWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang);
        return localVarResp.getData();
    }

    /**
     * Gets information about a particular EULA version
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @return ApiResponse&lt;EulaVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version data. A null value for valid_until indicates no expiration of the EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EulaVersion> eulaVersionIdGetWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang) throws ApiException {
        okhttp3.Call localVarCall = eulaVersionIdGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, null);
        Type localVarReturnType = new TypeToken<EulaVersion>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets information about a particular EULA version (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Version data. A null value for valid_until indicates no expiration of the EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdGetAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback<EulaVersion> _callback) throws ApiException {

        okhttp3.Call localVarCall = eulaVersionIdGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, _callback);
        Type localVarReturnType = new TypeToken<EulaVersion>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eulaVersionIdViewGet
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML Text of the desired EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdViewGetCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eula/{version_id}/view"
            .replace("{" + "version_id" + "}", localVarApiClient.escapeString(versionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lang != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lang", lang));
        }

        if (xTurnitinIntegrationName != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Name", localVarApiClient.parameterToString(xTurnitinIntegrationName));
        }

        if (xTurnitinIntegrationVersion != null) {
            localVarHeaderParams.put("X-Turnitin-Integration-Version", localVarApiClient.parameterToString(xTurnitinIntegrationVersion));
        }

        final String[] localVarAccepts = {
            "text/plain; charset=utf-8",
            "application/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eulaVersionIdViewGetValidateBeforeCall(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xTurnitinIntegrationName' is set
        if (xTurnitinIntegrationName == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationName' when calling eulaVersionIdViewGet(Async)");
        }

        // verify the required parameter 'xTurnitinIntegrationVersion' is set
        if (xTurnitinIntegrationVersion == null) {
            throw new ApiException("Missing the required parameter 'xTurnitinIntegrationVersion' when calling eulaVersionIdViewGet(Async)");
        }

        // verify the required parameter 'versionId' is set
        if (versionId == null) {
            throw new ApiException("Missing the required parameter 'versionId' when calling eulaVersionIdViewGet(Async)");
        }

        return eulaVersionIdViewGetCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, _callback);

    }

    /**
     * Gets the text of a particular EULA version
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML Text of the desired EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public String eulaVersionIdViewGet(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang) throws ApiException {
        ApiResponse<String> localVarResp = eulaVersionIdViewGetWithHttpInfo(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang);
        return localVarResp.getData();
    }

    /**
     * Gets the text of a particular EULA version
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML Text of the desired EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> eulaVersionIdViewGetWithHttpInfo(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang) throws ApiException {
        okhttp3.Call localVarCall = eulaVersionIdViewGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the text of a particular EULA version (asynchronously)
     * 
     * @param xTurnitinIntegrationName a human readable string representing the type of integration being used (required)
     * @param xTurnitinIntegrationVersion the version of the integration platform being used (required)
     * @param versionId The EULA version ID (or &#x60;latest&#x60;)  (required)
     * @param lang The desired language of the specified EULA version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> HTML Text of the desired EULA version </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Request is malformed or missing required data </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Not properly authenticated </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests have been made in a short amount of time, please wait for a bit a try again.  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An Error Occurred </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eulaVersionIdViewGetAsync(String xTurnitinIntegrationName, String xTurnitinIntegrationVersion, String versionId, String lang, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = eulaVersionIdViewGetValidateBeforeCall(xTurnitinIntegrationName, xTurnitinIntegrationVersion, versionId, lang, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
