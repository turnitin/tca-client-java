/*
 * Turnitin Core API
 * Turnitin Core API (TCA) provides direct API access to the core functionality provided by Turnitin. TCA supports file submission, similarity report generation, group management, and visualization of report matches via Cloud Viewer or PDF download. Below is the full flow to successfully set up an integration scope, an API Key, and make calls to TCA. Integration Scope and API Key management is done via the Admin Console UI by logging in as an admin user. For more details, go to our [developer portal documentation page](https://developers.turnitin.com/docs). ## Integration Scope and API Key Management TCA API calls must provide an API Key for authentication, so you must first have at least one integration scope associated with at least one API Key to use TCA. ### Admin Console UI First, login to Admin Console UI as an *Admin* user with permission to create Integration Scopes, under a tenant that is licensed to use the TCA product Integration Scopes (you can create a new one, or add keys to existing)    * Click `Integrations` in the side bar --> `+ Add Integration` at top the top of the page --> Enter a name --> `Add` Button   API Keys   * Click `Integrations` in the side bar --> `Create API Key` Button next to a given Integration Scope -->   Enter a name --> click `Create and View button`   * Copy/Save the key manually or click save to clipboard button to copy it (this is the only time it will show)  ## TCA Flow    *  Register a webhook   *  Create a submission   *  Upload a file for the submission   *  Wait for the submission upload to process      * If you registered a webhook, a callback will be sent to it when upload is complete      * The status of the *submission* will also update to `COMPLETE`   *  Request a Similarity Report   *  Wait for similarity report to process      * If you registered a webhook, a callback will be sent to it when report is complete      * The status of the *report* will also be updated to `COMPLETE`   *  Request a URL with parameters to view the Similarity Report 
 *
 * The version of the OpenAPI document: 1.0.258
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SimilarityMetadataAllOfTopMatches
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-17T18:44:23.150387Z[Etc/UTC]")
public class SimilarityMetadataAllOfTopMatches {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  private BigDecimal percentage;

  public static final String SERIALIZED_NAME_SUBMISSION_ID = "submission_id";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_ID)
  private String submissionId;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "source_type";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_MATCHED_WORD_COUNT_TOTAL = "matched_word_count_total";
  @SerializedName(SERIALIZED_NAME_MATCHED_WORD_COUNT_TOTAL)
  private BigDecimal matchedWordCountTotal;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submitted_date";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private String submittedDate;

  public static final String SERIALIZED_NAME_INSTITUTION_NAME = "institution_name";
  @SerializedName(SERIALIZED_NAME_INSTITUTION_NAME)
  private String institutionName;

  public SimilarityMetadataAllOfTopMatches() {
  }

  public SimilarityMetadataAllOfTopMatches name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Source name
   * @return name
  **/
  @javax.annotation.Nullable

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public SimilarityMetadataAllOfTopMatches percentage(BigDecimal percentage) {
    
    this.percentage = percentage;
    return this;
  }

   /**
   * Match percentage
   * @return percentage
  **/
  @javax.annotation.Nullable

  public BigDecimal getPercentage() {
    return percentage;
  }


  public void setPercentage(BigDecimal percentage) {
    this.percentage = percentage;
  }


  public SimilarityMetadataAllOfTopMatches submissionId(String submissionId) {
    
    this.submissionId = submissionId;
    return this;
  }

   /**
   * Matching submission id
   * @return submissionId
  **/
  @javax.annotation.Nullable

  public String getSubmissionId() {
    return submissionId;
  }


  public void setSubmissionId(String submissionId) {
    this.submissionId = submissionId;
  }


  public SimilarityMetadataAllOfTopMatches sourceType(String sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Matching submission source type (INTERNET, PUBLICATION, SUBMITTED_WORK)
   * @return sourceType
  **/
  @javax.annotation.Nullable

  public String getSourceType() {
    return sourceType;
  }


  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public SimilarityMetadataAllOfTopMatches matchedWordCountTotal(BigDecimal matchedWordCountTotal) {
    
    this.matchedWordCountTotal = matchedWordCountTotal;
    return this;
  }

   /**
   * number of matching words
   * @return matchedWordCountTotal
  **/
  @javax.annotation.Nullable

  public BigDecimal getMatchedWordCountTotal() {
    return matchedWordCountTotal;
  }


  public void setMatchedWordCountTotal(BigDecimal matchedWordCountTotal) {
    this.matchedWordCountTotal = matchedWordCountTotal;
  }


  public SimilarityMetadataAllOfTopMatches submittedDate(String submittedDate) {
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * date match was submitted
   * @return submittedDate
  **/
  @javax.annotation.Nullable

  public String getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(String submittedDate) {
    this.submittedDate = submittedDate;
  }


  public SimilarityMetadataAllOfTopMatches institutionName(String institutionName) {
    
    this.institutionName = institutionName;
    return this;
  }

   /**
   * intitution name for matched SUBMITTED_WORK types
   * @return institutionName
  **/
  @javax.annotation.Nullable

  public String getInstitutionName() {
    return institutionName;
  }


  public void setInstitutionName(String institutionName) {
    this.institutionName = institutionName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimilarityMetadataAllOfTopMatches similarityMetadataAllOfTopMatches = (SimilarityMetadataAllOfTopMatches) o;
    return Objects.equals(this.name, similarityMetadataAllOfTopMatches.name) &&
        Objects.equals(this.percentage, similarityMetadataAllOfTopMatches.percentage) &&
        Objects.equals(this.submissionId, similarityMetadataAllOfTopMatches.submissionId) &&
        Objects.equals(this.sourceType, similarityMetadataAllOfTopMatches.sourceType) &&
        Objects.equals(this.matchedWordCountTotal, similarityMetadataAllOfTopMatches.matchedWordCountTotal) &&
        Objects.equals(this.submittedDate, similarityMetadataAllOfTopMatches.submittedDate) &&
        Objects.equals(this.institutionName, similarityMetadataAllOfTopMatches.institutionName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, percentage, submissionId, sourceType, matchedWordCountTotal, submittedDate, institutionName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimilarityMetadataAllOfTopMatches {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    submissionId: ").append(toIndentedString(submissionId)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    matchedWordCountTotal: ").append(toIndentedString(matchedWordCountTotal)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    institutionName: ").append(toIndentedString(institutionName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("percentage");
    openapiFields.add("submission_id");
    openapiFields.add("source_type");
    openapiFields.add("matched_word_count_total");
    openapiFields.add("submitted_date");
    openapiFields.add("institution_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SimilarityMetadataAllOfTopMatches
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SimilarityMetadataAllOfTopMatches.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SimilarityMetadataAllOfTopMatches is not found in the empty JSON string", SimilarityMetadataAllOfTopMatches.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!SimilarityMetadataAllOfTopMatches.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SimilarityMetadataAllOfTopMatches` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("submission_id") != null && !jsonObj.get("submission_id").isJsonNull()) && !jsonObj.get("submission_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submission_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submission_id").toString()));
      }
      if ((jsonObj.get("source_type") != null && !jsonObj.get("source_type").isJsonNull()) && !jsonObj.get("source_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_type").toString()));
      }
      if ((jsonObj.get("submitted_date") != null && !jsonObj.get("submitted_date").isJsonNull()) && !jsonObj.get("submitted_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submitted_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submitted_date").toString()));
      }
      if ((jsonObj.get("institution_name") != null && !jsonObj.get("institution_name").isJsonNull()) && !jsonObj.get("institution_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `institution_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("institution_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SimilarityMetadataAllOfTopMatches.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SimilarityMetadataAllOfTopMatches' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SimilarityMetadataAllOfTopMatches> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SimilarityMetadataAllOfTopMatches.class));

       return (TypeAdapter<T>) new TypeAdapter<SimilarityMetadataAllOfTopMatches>() {
           @Override
           public void write(JsonWriter out, SimilarityMetadataAllOfTopMatches value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SimilarityMetadataAllOfTopMatches read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SimilarityMetadataAllOfTopMatches given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SimilarityMetadataAllOfTopMatches
  * @throws IOException if the JSON string is invalid with respect to SimilarityMetadataAllOfTopMatches
  */
  public static SimilarityMetadataAllOfTopMatches fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SimilarityMetadataAllOfTopMatches.class);
  }

 /**
  * Convert an instance of SimilarityMetadataAllOfTopMatches to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

